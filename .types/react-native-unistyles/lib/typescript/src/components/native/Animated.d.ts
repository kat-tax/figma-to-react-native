import { Animated as RNAnimated } from 'react-native';
export declare const Animated: {
    View: RNAnimated.AnimatedComponent<any>;
    Text: RNAnimated.AnimatedComponent<any>;
    FlatList: RNAnimated.AnimatedComponent<any>;
    Image: RNAnimated.AnimatedComponent<any>;
    ScrollView: RNAnimated.AnimatedComponent<any>;
    SectionList: RNAnimated.AnimatedComponent<any>;
    decay(value: RNAnimated.AnimatedValue | RNAnimated.AnimatedValueXY, config: RNAnimated.DecayAnimationConfig): RNAnimated.CompositeAnimation;
    add<OutputT extends number | string>(a: RNAnimated.Animated, b: RNAnimated.Animated): RNAnimated.AnimatedAddition<OutputT>;
    subtract<OutputT extends number | string>(a: RNAnimated.Animated, b: RNAnimated.Animated): RNAnimated.AnimatedSubtraction<OutputT>;
    divide<OutputT extends number | string>(a: RNAnimated.Animated, b: RNAnimated.Animated): RNAnimated.AnimatedDivision<OutputT>;
    multiply<OutputT extends number | string>(a: RNAnimated.Animated, b: RNAnimated.Animated): RNAnimated.AnimatedMultiplication<OutputT>;
    modulo<OutputT extends number | string>(a: RNAnimated.Animated, modulus: number): RNAnimated.AnimatedModulo<OutputT>;
    diffClamp<OutputT extends number | string>(a: RNAnimated.Animated, min: number, max: number): RNAnimated.AnimatedDiffClamp<OutputT>;
    delay(time: number): RNAnimated.CompositeAnimation;
    sequence(animations: Array<RNAnimated.CompositeAnimation>): RNAnimated.CompositeAnimation;
    stagger(time: number, animations: Array<RNAnimated.CompositeAnimation>): RNAnimated.CompositeAnimation;
    loop(animation: RNAnimated.CompositeAnimation, config?: RNAnimated.LoopAnimationConfig): RNAnimated.CompositeAnimation;
    spring(value: RNAnimated.AnimatedValue | RNAnimated.AnimatedValueXY, config: RNAnimated.SpringAnimationConfig): RNAnimated.CompositeAnimation;
    parallel(animations: Array<RNAnimated.CompositeAnimation>, config?: RNAnimated.ParallelConfig): RNAnimated.CompositeAnimation;
    event<T>(argMapping: Array<RNAnimated.Mapping | null>, config?: RNAnimated.EventConfig<T>): (...args: any[]) => void;
    createAnimatedComponent<T extends React.ComponentType<any>>(component: T, options?: RNAnimated.AnimatedComponentOptions): RNAnimated.AnimatedComponent<T>;
    Animated: typeof RNAnimated.Animated;
    AnimatedNode: typeof RNAnimated.AnimatedNode;
    AnimatedWithChildren: typeof RNAnimated.AnimatedWithChildren;
    AnimatedColor: typeof RNAnimated.AnimatedColor;
    AnimatedInterpolation: typeof RNAnimated.AnimatedInterpolation;
    Value: typeof RNAnimated.Value;
    ValueXY: typeof RNAnimated.ValueXY;
    timing: (value: RNAnimated.AnimatedValue | RNAnimated.AnimatedValueXY, config: RNAnimated.TimingAnimationConfig) => RNAnimated.CompositeAnimation;
    AnimatedAddition: typeof RNAnimated.AnimatedAddition;
    AnimatedSubtraction: typeof RNAnimated.AnimatedSubtraction;
    AnimatedDivision: typeof RNAnimated.AnimatedDivision;
    AnimatedMultiplication: typeof RNAnimated.AnimatedMultiplication;
    AnimatedModulo: typeof RNAnimated.AnimatedModulo;
    AnimatedDiffClamp: typeof RNAnimated.AnimatedDiffClamp;
};
//# sourceMappingURL=Animated.d.ts.map